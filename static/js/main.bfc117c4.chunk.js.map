{"version":3,"sources":["logo.svg","components/Cell/index.jsx","components/Board/index.jsx","FirebaseConfig.jsx","components/Queue/index.jsx","components/Navbar.jsx","app.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","this","props","value","clickHandler","cls","console","log","className","onClick","React","Component","Board","index","alert","squares","board","map","val","push","key","cellClickHandler","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Queue","state","servingQNum","lastQNum","updateQueue","queue","i","rear_num_from_firebase","serving_num_from_firebase","setState","concat","queueName","collection","doc","onSnapshot","includeMetadataChanges","queue_name_from_firebase","data","name","rear_no","serving_no","addToQueue","updateServingQNum","arrayPosition","update","FieldValue","increment","merge","then","catch","error","set","variant","next","bind","reset","Navbar","scrollToTop","scroll","id","src","logo","alt","App","Fragment","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bfc117c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './cell.scss';\n\nclass Cell extends React.Component {\n\n    render() {\n        const { value, clickHandler } = this.props;\n\n        let cls = value === 'X' ? `square-1` : `square-2`;\n        console.log(\"cls: \" + cls);\n\n        return (\n            <span className={cls} onClick={() => { clickHandler() }}>{value}</span>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from '../Cell';\n\nclass Board extends React.Component {\n    //     componentDidMount() {\n    //         this.findClickables(this.props.board, this.props.size);\n    //         document.body.addEventListener('keydown', (event) => {this.handleKeyPress(event)});\n    //     }\n\n    //     componentWillReceiveProps(nextProps) {\n    //         this.findClickables(nextProps.board, nextProps.size);\n    //     }\n\n    //     componentWillUnmount() {\n    //         document.body.removeEventListener('keydown', (event) => {this.handleKeyPress(event)})\n    //     }\n\n    //     shouldComponentUpdate(nextProps) {\n    //         const curr = this.props.board.join('');\n    //         const next = nextProps.board.join('');\n    //         return curr !== next;\n    //     }\n\n    cellClickHandler(index) {\n        alert(index + ' clicked');\n    }\n\n    render() {\n        let squares = [];\n\n        this.props.board.map((val, index) => {\n            console.log(\"val: \" + val + \" || index: \" + index);\n            squares.push(\n                <div>\n                    <Cell\n                        key={index}\n                        value={val}\n                        clickHandler={() => this.cellClickHandler(index)}\n                    />\n                </div>\n            );\n        });\n\n        return (\n            <div className='board'>\n                {squares}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import firebase from 'firebase'\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCJcKHsm9yfeCIZcQtwIgz7j8j0v_lJUFQ\",\n    authDomain: \"queuesapp-415d3.firebaseapp.com\",\n    databaseURL: \"https://queuesapp-415d3.firebaseio.com\",\n    projectId: \"queuesapp-415d3\",\n    storageBucket: \"queuesapp-415d3.appspot.com\",\n    messagingSenderId: \"1023683818860\",\n    appId: \"1:1023683818860:web:fbdb633ee95a930c\"\n    };\n\nconst firebaseApp=firebase.initializeApp(firebaseConfig);\nconst db=firebaseApp.firestore();\n\nexport default db;","import React from 'react';\nimport firebase from 'firebase';\nimport Board from '../Board';\nimport './queue.scss';\n\nimport db from '../../FirebaseConfig';\n\nclass Queue extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: [],\n            servingQNum: 0,\n            lastQNum: 0\n        };\n    }\n\n    componentDidMount() {\n        this.updateQueue(\"queue_\" + this.props.queue);\n    }\n\n    // shouldComponentUpdate() {\n    //     console.log(\"shouldComponentUpdate\");\n    //     this.updateQueue(\"queue_\" + this.props.queue);\n    // }\n\n    addToQueue(i, rear_num_from_firebase, serving_num_from_firebase) {\n        console.log(\"add to Queue\");\n        this.setState({\n            board: this.state.board.concat(i),\n            lastQNum: rear_num_from_firebase,\n            servingQNum: serving_num_from_firebase\n        })\n    }\n\n\n    updateQueue(queueName) {\n        console.log(\"updateQueue called\");\n        db.collection(\"SweeCafe\").doc(queueName)\n            .onSnapshot({\n                // Listen for document metadata changes\n                includeMetadataChanges: true\n            }, (doc) => {\n                let queue_name_from_firebase = doc.data().name;\n                let rear_num_from_firebase = doc.data().rear_no;\n                let serving_num_from_firebase = doc.data().serving_no;\n                console.log('queue_name: (firebase)', queue_name_from_firebase);\n                console.log('serving_no: (firebase)', serving_num_from_firebase);\n                console.log('servingQNum: (local)', this.state.servingQNum);\n                console.log('lastQNum: (local)', this.state.lastQNum);\n\n                if (this.state.lastQNum == 0) {  // Local UI is not set (i.e. page is empty before loaded from firebase.)\n                    console.log(\"A ...\");\n                    for (let i = 1; i <= rear_num_from_firebase; i++) {\n                        if (i <= serving_num_from_firebase) { this.addToQueue('X', rear_num_from_firebase, serving_num_from_firebase); }  // put 'X' to cell which has been served\n                        else { this.addToQueue(this.props.queue + i, rear_num_from_firebase, serving_num_from_firebase); }\n                    }\n                    //   this.setState({ lastQNum: rear_num_from_firebase });\n                } else if (rear_num_from_firebase == 1 && serving_num_from_firebase == 0) { // Reset button pressed\n                    console.log(\"B ...\");\n                    this.setState({ board: [], lastQNum: 0 });  // need to trigger to reload the queue on UI\n                } else if (rear_num_from_firebase > this.state.lastQNum) {  // Add to queue when new ticket is added to Q in firebase\n                    console.log(\"C ...\");\n                    console.log(\"rear_num_from_firebase: \" + rear_num_from_firebase);\n                    console.log(\"lastQNum: \" + this.state.lastQNum);\n                    this.addToQueue(this.props.queue + rear_num_from_firebase, rear_num_from_firebase, serving_num_from_firebase);\n                    //    this.setState({ lastQNum: rear_num_from_firebase });\n                } else if (serving_num_from_firebase > this.state.servingQNum) {  // Advance Serving queue number\n                    console.log(\"D ...\");\n                    this.updateServingQNum(serving_num_from_firebase);\n                }\n                //                this.setState({ servingQNum: serving_num_from_firebase })\n            });\n    }\n\n    updateServingQNum(serving_num_from_firebase) {  // put the 'X' mark to the queue in the right position \n        let arrayPosition = serving_num_from_firebase - 1;  // array starts from 0\n        // 1. Make a shallow copy of the items\n        let board = [...this.state.board];\n        // 2. Make a shallow copy of the item you want to mutate\n        let item = { ...board[arrayPosition] };\n        // 3. Replace the property you're intested in\n        item = 'X';\n        // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n        board[arrayPosition] = item;\n        // 5. Set the state to our new copy\n        this.setState({ board, servingQNum: serving_num_from_firebase });\n    }\n\n    next() {  // Update firebase when serving queue is advanced (on webpage)\n        if (this.state.servingQNum < this.state.lastQNum) {\n            // update document in Firestore\n            db.collection(\"SweeCafe\").doc('queue_' + this.props.queue).update({\n                serving_no: firebase.firestore.FieldValue.increment(1)\n            }, { merge: true })\n                .then(function () {\n                    console.log(\"Document successfully written!\");\n                })\n                .catch(function (error) {\n                    console.error(\"Error writing document: \", error);\n                });\n        }\n        else {\n            alert(\"Alert:  Reached end of queue!\");\n        }\n        //        this.fetchData();\n    }\n\n    reset() {  // Update firebase when reset button in pressed (on webpage)\n        db.collection(\"SweeCafe\").doc('queue_' + this.props.queue).set({\n            serving_no: 0,\n            rear_no: 1\n        }, { merge: true })\n            .then(function () {\n                console.log(\"Document successfully written!\");\n            })\n            .catch(function (error) {\n                console.error(\"Error writing document: \", error);\n            });\n        // this.setState({ board: [], lastQNum: 0 });\n    }\n\n    render() {\n        console.log(\"<<< rendering >>>\");\n        return (\n            <div className='queue'>\n                <div className='displayBox'>\n                    <p>Currently serving: <strong> {this.props.queue}{this.state.servingQNum} </strong></p>\n                    <p>Last in queue: <strong> {this.props.queue}{this.state.lastQNum} </strong></p>\n                </div>\n                <div className=\"queue-body\">\n                    <Board\n                        board={this.state.board}\n                    />\n                </div>\n                <button className='nextButton' variant=\"primary\" onClick={this.next.bind(this)}>Next</button>\n                <br></br>\n                <button className='nextButton' variant=\"primary\" onClick={this.reset.bind(this)}>RESET</button>\n            </div>\n\n        );\n    }\n}\n\nexport default Queue;\n","import React, { Component } from \"react\";\nimport { Link, animateScroll as scroll } from \"react-scroll\";\nimport logo from \"../logo.svg\";\nexport default class Navbar extends Component {\n  scrollToTop = () => {\n    scroll.scrollToTop();\n  };\n\n  render() {\n    return (\n      <nav className=\"nav\" id=\"navbar\">\n        <div className=\"nav-content\">\n          <img\n            src={logo}\n            className=\"nav-logo\"\n            alt=\"Logo\"\n            onClick={this.scrollToTop}\n          />\n          <h2>QServer</h2>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport './app.scss';\nimport Queue from './components/Queue';\nimport Navbar from \"./components/Navbar\";\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport FireStore from \"./FireStore\";\n\nclass App extends Component {\n    render() {\n        console.log(\"<<< rendering 1 >>>\");\n        return (\n            <React.Fragment>\n                <Navbar />\n                <main className=\"container\">\n                    <Container>\n                        <Row>\n                            <Col>\n                                <h3 className=\"header\">Queue A</h3>\n                                <div className=\"app__content\">\n                                    <div className=\"app__header\">\n                                    </div>\n                                    <div className=\"app__body\">\n                                        <Queue queue={\"A\"} />\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col>\n                                <h3 className=\"header\">Queue B</h3>\n                                <div className=\"app__content\">\n                                    <div className=\"app__header\">\n                                    </div>\n                                    <div className=\"app__body\">\n                                        <Queue queue={\"B\"} />\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col>\n                                <h3 className=\"header\">Queue C</h3>\n                                <div className=\"app__content\">\n                                    <div className=\"app__header\">\n                                    </div>\n                                    <div className=\"app__body\">\n                                        <Queue queue={\"C\"} />\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </main>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './app.scss';\n\nReactDOM.render(\n  //   <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}